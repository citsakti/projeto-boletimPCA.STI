/**
 * AnalyticsDetails.js - Fun√ß√µes para gerenciar a exibi√ß√£o de detalhes dos projetos na an√°lise
 * 
 * Este script √© respons√°vel por:
 *  - Renderizar tabelas detalhadas de projetos para diferentes categorias
 *  - Formatar dados para exibi√ß√£o (status, √°reas, valores monet√°rios)
 *  - Implementar funcionalidades de expans√£o/contra√ß√£o de se√ß√µes
 *  - Calcular m√©tricas de produtividade para per√≠odos espec√≠ficos
 *  - Gerenciar intera√ß√µes do usu√°rio com elementos expans√≠veis
 * 
 * =============== ESTRUTURA PRINCIPAL ================
 * 
 * # Fun√ß√µes de Renderiza√ß√£o:
 *   - renderProjectDetails(): Gera tabelas para detalhes por categoria or√ßament√°ria
 *   - renderSituacionalDetails(): Gera tabelas para detalhes por situa√ß√£o
 *   - renderAreaDetails(): Gera tabelas para detalhes por √°rea organizacional
 *   - renderProdutividadeDetalhada(): Gera se√ß√£o completa de produtividade
 *   - renderProdutividadeProjetosTable(): Gera tabelas para projetos da produtividade
 * 
 * # Fun√ß√µes de Formata√ß√£o:
 *   - formatAreaWithClasses(): Aplica estilos CSS espec√≠ficos por √°rea
 *   - formatStatusWithClasses(): Aplica estilos CSS espec√≠ficos por status
 *   - formatCurrency(): Formata valores num√©ricos para moeda (definido em outro arquivo)
 * 
 * # Fun√ß√µes de Event Listeners:
 *   - addExpandListeners(): Configura eventos para bot√µes de expandir/contrair gerais
 *   - addSituacionalExpandListeners(): Configura eventos para se√ß√£o situacional
 *   - addAreaExpandListeners(): Configura eventos para detalhes de √°reas
 *   - addProdutividadeExpandListeners(): Configura eventos para se√ß√£o de produtividade
 *   - addStatusExpandListeners(): Configura eventos para bot√µes de status
 *   - addTipoExpandListeners(): Configura eventos para bot√µes de tipo de contrata√ß√£o
 * 
 * # Fun√ß√µes de C√°lculo:
 *   - calcularProdutividade(): Calcula m√©tricas de acompanhamento para per√≠odos
 *   - toggleAreaDetails(): Controla a exibi√ß√£o de detalhes de √°reas
 * 
 * # Fluxo de Execu√ß√£o:
 *   1. Fun√ß√µes de renderiza√ß√£o s√£o chamadas por Analytics.js
 *   2. Tabelas e se√ß√µes detalhadas s√£o geradas com HTML estruturado
 *   3. Event listeners s√£o configurados para elementos expans√≠veis
 *   4. Usu√°rio interage com os elementos para mostrar/ocultar detalhes
 *   5. Dados s√£o formatados adequadamente durante a exibi√ß√£o
 * 
 * # Depend√™ncias:
 *   - analyticData: Objeto global com dados processados (de Analytics.js)
 *   - setupAnalyticsTooltips: Fun√ß√£o global para tooltips de contratos
 *   - Fun√ß√µes de formata√ß√£o auxiliares (formatCurrency, etc.)
 */

/**
 * Fun√ß√£o para aplicar estilo de √°rea
 * @param {string} area Nome da √°rea
 * @returns {string} HTML com a √°rea formatada
 */
function formatAreaWithClasses(area) {
    // Mapeamento de √°reas para classes CSS (igual ao usado em areas-classes.js)
    const areaMapping = {
        'STI üë©‚Äçüíº': 'area-sti',
        'OPERA√á√ïES üóÑÔ∏è': 'area-operacoes',
        'DEV üë®‚Äçüíª': 'area-dev',
        'ANALYTICS üìä': 'area-analytics',
        'GOVERNAN√áA üåê': 'area-governanca',
    };
    
    // Verificar se a √°rea est√° no mapeamento
    if (areaMapping[area]) {
        return `<span class="${areaMapping[area]}-highlight">${area}</span>`;
    }
    
    // Sem formata√ß√£o especial
    return area;
}

// Usa helper global se dispon√≠vel para c√©lula de processo
function _renderProcessCell(value, modalidadeX = '', numeroY = ''){
    if (typeof renderProcessCell === 'function') return renderProcessCell(value, modalidadeX, numeroY);
    const val = (value || '').toString().trim();
    if (!val || val === 'N/A' || val === '-') return val || '-';
    let html = `${val} <span class="processo-link-icon" title="Abrir processo">üîó</span>`;
    const hasNumeroY = typeof numeroY === 'string' ? numeroY.trim() !== '' && numeroY.trim() !== '-' : !!numeroY;
    if (hasNumeroY) {
        const x = (modalidadeX || '').toString().trim();
        const y = (numeroY || '').toString().trim();
        html += ` <span class="comprasgov-link-icon" title="Abrir acompanhamento no Comprasnet" data-x="${x}" data-y="${y}">üõçÔ∏è</span>`;
    }
    return html;
}

// Usa helper global se dispon√≠vel para c√©lula de projeto
function _renderProjectCell(projectText, modalidadeX = '', numeroY = ''){
    if (typeof window.renderProjectCellWithCompras === 'function') {
        return window.renderProjectCellWithCompras(projectText, modalidadeX, numeroY);
    }
    // Fallback: renderizar sem formata√ß√£o especial
    const text = projectText == null ? '' : String(projectText);
    const y = numeroY == null ? '' : String(numeroY).trim();
    const hasCompras = y !== '' && y !== '-';
    if (!hasCompras) return text;
    const x = modalidadeX == null ? '' : String(modalidadeX).trim();
    const comprasAttrs = ` class="comprasgov-link-icon" title="Abrir acompanhamento no Comprasnet" data-x="${x}" data-y="${y}"`;
    return `${text} <span${comprasAttrs}>üõçÔ∏è</span>`;
}

/**
 * Fun√ß√£o para renderizar detalhes dos projetos por categoria
 * @param {string} categoria Nome da categoria 
 */
function renderProjectDetails(categoria) {
    const projetos = analyticData.projetosPorCategoria[categoria] || [];
    
    if (projetos.length === 0) {
        return '<p>Nenhum projeto encontrado nesta categoria.</p>';
    }
    
    let html = `
        <table class="project-details-table">
            <thead>
                <tr>
                    <th>ID PCA</th>
                    <th>√Årea</th>
                    <th>Projeto</th>
                    <th>Contratar At√©</th>
                    <th>Valor (R$)</th>
                    <th>Processo</th>
                </tr>
            </thead>
            <tbody>
    `;
    
    projetos.forEach(projeto => {
        let contratoAttrs = '';
        if (projeto.numeroContrato && String(projeto.numeroContrato).trim() !== '') {
            contratoAttrs += ` data-contrato="${String(projeto.numeroContrato).trim()}"`;
        }
        if (projeto.numeroRegistro && String(projeto.numeroRegistro).trim() !== '') {
            contratoAttrs += ` data-registro="${String(projeto.numeroRegistro).trim()}"`;
        }

        html += `
            <tr>
                <td>${projeto.idPca}</td>
                <td>${formatAreaWithClasses(projeto.area)}</td>
                <td${contratoAttrs}>${_renderProjectCell(projeto.projeto, projeto.modalidadeX, projeto.numeroY)}</td>
                <td>${projeto.dataProcesso || '-'}</td>
                <td>R$ ${formatCurrency(projeto.valor)}</td>
                <td>${_renderProcessCell(projeto.numProcesso, projeto.modalidadeX, projeto.numeroY)}</td>
            </tr>
        `;
    });
    
    html += `
            </tbody>
        </table>
    `;
    
    return html;
}

/**
 * Fun√ß√£o para renderizar detalhes dos projetos por categoria situacional
 * @param {string} categoria Nome da categoria situacional
 */
function renderSituacionalDetails(categoria) {
    const projetos = analyticData.projetosPorSituacao[categoria] || [];
    
    if (projetos.length === 0) {
        return '<p>Nenhum projeto encontrado nesta categoria.</p>';
    }
    
    let html = `
        <table class="project-details-table">
            <thead>
                <tr>
                    <th>ID PCA</th>
                    <th>√Årea</th>
                    <th>Projeto</th>
                    <th>Status</th>
                    <th>Contratar At√©</th>
                    <th>Valor (R$)</th>
                    <th>Processo</th>
                </tr>
            </thead>
            <tbody>
    `;
      projetos.forEach(projeto => {
        let contratoAttrs = '';
        if (projeto.numeroContrato && String(projeto.numeroContrato).trim() !== '') {
            contratoAttrs += ` data-contrato="${String(projeto.numeroContrato).trim()}"`;
        }
        if (projeto.numeroRegistro && String(projeto.numeroRegistro).trim() !== '') {
            contratoAttrs += ` data-registro="${String(projeto.numeroRegistro).trim()}"`;
        }        // Renderizar tag de dias de atraso para categoria autuacaoAtrasada
        let statusComDiasAtraso = formatStatusWithClasses(projeto.status);
        if (categoria === 'autuacaoAtrasada' && projeto.diasAtraso && typeof renderDiasAtrasoTag === 'function') {
            statusComDiasAtraso += renderDiasAtrasoTag(projeto.diasAtraso);
        }

        html += `
            <tr>
                <td>${projeto.idPca}</td>
                <td>${formatAreaWithClasses(projeto.area)}</td>
                <td${contratoAttrs}>${_renderProjectCell(projeto.projeto, projeto.modalidadeX, projeto.numeroY)}</td>
                <td>${statusComDiasAtraso}</td>
                <td>${projeto.dataProcesso || '-'}</td>
                <td>R$ ${formatCurrency(projeto.valor)}</td>
                <td>${_renderProcessCell(projeto.numProcesso, projeto.modalidadeX, projeto.numeroY)}</td>
            </tr>
        `;
    });
    
    html += `
            </tbody>
        </table>
    `;
    
    return html;
}

/**
 * Fun√ß√£o para renderizar detalhes dos projetos por √°rea
 * @param {string} area Nome da √°rea 
 */
function renderAreaDetails(area) {
    // Obter projetos diretamente da lista populada em Analytics.js
    // Esta lista agora cont√©m apenas projetos de Aquisi√ß√£o ou Renova√ß√£o para a √°rea especificada.
    const projetosDaArea = analyticData.projetosPorArea[area] || []; 

    if (projetosDaArea.length === 0) {
        // Mensagem ajustada para refletir que a lista cont√©m projetos de Aquisi√ß√£o/Renova√ß√£o
        return '<p>Nenhum projeto de Aquisi√ß√£o ou Renova√ß√£o encontrado nesta √°rea.</p>';
    }
    
    let html = `
        <table class="project-details-table">
            <thead>
                <tr>
                    <th>ID PCA</th>
                    <th>Tipo</th>
                    <th>Projeto</th>
                    <th>Status</th>
                    <th>Contratar At√©</th>
                    <th>Valor (R$)</th>
                    <th>Processo</th>
                </tr>
            </thead>
            <tbody>
    `;
    
    // Iterar sobre os projetos da √°rea (que j√° s√£o os corretos)
    projetosDaArea.forEach(projeto => {
        let contratoAttrs = '';
        if (projeto.numeroContrato && String(projeto.numeroContrato).trim() !== '') {
            contratoAttrs += ` data-contrato="${String(projeto.numeroContrato).trim()}"`;
        }
        if (projeto.numeroRegistro && String(projeto.numeroRegistro).trim() !== '') {
            contratoAttrs += ` data-registro="${String(projeto.numeroRegistro).trim()}"`;
        }

        html += `
            <tr>
                <td>${projeto.idPca}</td>
                <td>${projeto.tipo}</td>
                <td${contratoAttrs}>${_renderProjectCell(projeto.projeto, projeto.modalidadeX, projeto.numeroY)}</td>
                <td>${formatStatusWithClasses(projeto.status)}</td>
                <td>${projeto.dataProcesso || '-'}</td>
                <td>R$ ${formatCurrency(projeto.valor)}</td>
                <td>${_renderProcessCell(projeto.numProcesso, projeto.modalidadeX, projeto.numeroY)}</td>
            </tr>
        `;
    });
    
    html += `
            </tbody>
        </table>
    `;
    
    return html;
}

/**
 * Fun√ß√£o helper para notificar m√≥dulos de tags ap√≥s expans√£o de tabelas
 */
function notifyTagModulesAfterExpansion() {
    // Notificar m√≥dulo de Comprasgov para reinicializar listeners
    if (window.comprasgovInstance && typeof window.comprasgovInstance.reinitialize === 'function') {
        window.comprasgovInstance.reinitialize();
    }
    
    // Notificar m√≥dulo de EspecieProcesso para processar novas linhas
    if (window.debugEspecieProcesso && typeof window.debugEspecieProcesso.scheduleUpdate === 'function') {
        window.debugEspecieProcesso.scheduleUpdate(200);
    }
}

/**
 * Fun√ß√£o para adicionar listeners nos bot√µes de expandir/contrair
 */
function addExpandListeners() {
    const expandButtons = document.querySelectorAll('.expand-btn');
    
    expandButtons.forEach(button => {
        // Remover qualquer √≠cone existente primeiro para evitar duplica√ß√£o
        const existingIcon = button.querySelector('.expand-icon');
        if (existingIcon) {
            existingIcon.remove();
        }
        
        // Guardar o texto original e adicionar √≠cone de seta
        const originalText = button.textContent;
        button.innerHTML = originalText + '<span class="expand-icon">‚ñº</span>';
        
        button.addEventListener('click', function(e) {
            e.stopPropagation(); // Evitar que o clique propague para a linha
            
            const categoria = this.getAttribute('data-category');
            const detailsRow = document.getElementById(`details-${categoria}`);
            
            if (!detailsRow) {
                console.error(`Elemento #details-${categoria} n√£o encontrado!`);
                return;
            }
            
            // Verificar se j√° est√° expandido por display ou classe
            const isExpanded = detailsRow.style.display !== 'none' && 
                              detailsRow.style.display !== '';
            
            if (!isExpanded) {
                // Primeiro garantir que est√° vis√≠vel, depois animar
                detailsRow.style.display = 'table-row';
                
                // Usar setTimeout para garantir que o browser renderize o display antes de adicionar a classe
                setTimeout(() => {
                    detailsRow.classList.add('expanded');
                    // Chamar setup de tooltips de contrato
                    if (typeof window.setupAnalyticsTooltips === 'function') {
                        window.setupAnalyticsTooltips();
                    }
                    // Notificar m√≥dulos de tags
                    notifyTagModulesAfterExpansion();
                }, 10);
                
                // Atualizar texto e √≠cone do bot√£o
                this.innerHTML = 'Recolher <span class="expand-icon rotate">‚ñº</span>';
                this.classList.add('active');
                
                // Destacar a linha pai
                const parentRow = this.closest('tr');
                if (parentRow) parentRow.classList.add('active');
            } else {
                // Remover a classe para iniciar a anima√ß√£o de sa√≠da
                detailsRow.classList.remove('expanded');
                
                // Aguardar a anima√ß√£o terminar antes de esconder
                setTimeout(() => {
                    detailsRow.style.display = 'none';
                }, 300);
                
                // Restaurar o bot√£o
                this.innerHTML = 'Expandir <span class="expand-icon">‚ñº</span>';
                this.classList.remove('active');
                
                // Remover destaque da linha pai
                const parentRow = this.closest('tr');
                if (parentRow) parentRow.classList.remove('active');
            }
        });
    });
}

/**
 * Fun√ß√£o para adicionar listeners nos bot√µes de expandir/contrair da se√ß√£o situacional
 */
function addSituacionalExpandListeners() {
    const situacionalExpandButtons = document.querySelectorAll('.situacional-expand-btn');
    
    situacionalExpandButtons.forEach(button => {
        // Remover qualquer √≠cone existente primeiro para evitar duplica√ß√£o
        const existingIcon = button.querySelector('.expand-icon');
        if (existingIcon) {
            existingIcon.remove();
        }
        
        // Guardar o texto original e adicionar √≠cone de seta
        const originalText = button.textContent;
        button.innerHTML = originalText + '<span class="expand-icon">‚ñº</span>';
        
        button.addEventListener('click', function(e) {
            e.stopPropagation(); // Evitar que o clique propague para a linha
            
            const categoria = this.getAttribute('data-category');
            const detailsRow = document.getElementById(`situacional-details-${categoria}`);
            
            if (!detailsRow) {
                console.error(`Elemento #situacional-details-${categoria} n√£o encontrado!`);
                return;
            }
            
            // Verificar se j√° est√° expandido por display ou classe
            const isExpanded = detailsRow.style.display !== 'none' && 
                              detailsRow.style.display !== '';
            
            if (!isExpanded) {
                // Primeiro garantir que est√° vis√≠vel, depois animar
                detailsRow.style.display = 'table-row';
                
                // Usar setTimeout para garantir que o browser renderize o display antes de adicionar a classe
                setTimeout(() => {
                    detailsRow.classList.add('expanded');
                    // Chamar setup de tooltips de contrato
                    if (typeof window.setupAnalyticsTooltips === 'function') {
                        window.setupAnalyticsTooltips();
                    }
                    // Notificar m√≥dulos de tags
                    notifyTagModulesAfterExpansion();
                }, 10);
                
                // Atualizar texto e √≠cone do bot√£o
                this.innerHTML = 'Recolher <span class="expand-icon rotate">‚ñº</span>';
                this.classList.add('active');
                
                // Destacar a linha pai
                const parentRow = this.closest('tr');
                if (parentRow) parentRow.classList.add('active');
            } else {
                // Remover a classe para iniciar a anima√ß√£o de sa√≠da
                detailsRow.classList.remove('expanded');
                
                // Aguardar a anima√ß√£o terminar antes de esconder
                setTimeout(() => {
                    detailsRow.style.display = 'none';
                }, 300);
                
                // Restaurar o bot√£o
                this.innerHTML = 'Expandir <span class="expand-icon">‚ñº</span>';
                this.classList.remove('active');
                
                // Remover destaque da linha pai
                const parentRow = this.closest('tr');
                if (parentRow) parentRow.classList.remove('active');
            }
        });
    });
}

/**
 * Fun√ß√£o para adicionar listeners nos bot√µes de expandir/contrair √°reas
 * com anima√ß√µes suaves para aparecer e desaparecer
 */
function addAreaExpandListeners() {
    const areaExpandButtons = document.querySelectorAll('.area-expand-btn');
    
    areaExpandButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            
            const area = this.getAttribute('data-area');
            const detailsDiv = document.getElementById(`area-details-${area.replace(/\s+/g, '-')}`);
            const areaBox = this.closest('.area-box');
            
            if (!detailsDiv) {
                console.error(`Elemento #area-details-${area.replace(/\s+/g, '-')} n√£o encontrado!`);
                return;
            }
            
            // Verificar se j√° est√° expandido
            const isExpanded = detailsDiv.classList.contains('expanded');
            
            if (!isExpanded) {
                // PRIMEIRO: Esconder todos os outros boxes IMEDIATAMENTE
                const allAreaBoxes = document.querySelectorAll('.area-box');
                allAreaBoxes.forEach(box => {
                    if (box !== areaBox) {
                        box.style.display = 'none'; // Esconde imediatamente
                    }
                });
                
                // SEGUNDO: Preparar o box selecionado para expandir
                areaBox.classList.add('area-box-expanded');
                
                // TERCEIRO: Aguardar um pequeno intervalo para garantir que o DOM atualizou
                // antes de iniciar a anima√ß√£o de expans√£o
                setTimeout(() => {
                    // Mostrar e animar os detalhes
                    detailsDiv.style.display = 'block';
                    
                    // For√ßa reflow para garantir que a transi√ß√£o seja aplicada
                    void detailsDiv.offsetWidth;
                    
                    // Inicia a anima√ß√£o de expans√£o
                    detailsDiv.classList.add('expanded');
                    // Chamar setup de tooltips de contrato
                    if (typeof window.setupAnalyticsTooltips === 'function') {
                        window.setupAnalyticsTooltips();
                    }
                    
                    // Atualiza o bot√£o
                    this.textContent = 'Recolher';
                    this.classList.add('active');
                }, 50); // Um pequeno delay √© suficiente
            } else {
                // Recolher: primeiro remove a classe expanded para iniciar a anima√ß√£o de fechamento
                detailsDiv.classList.remove('expanded');
                areaBox.classList.remove('area-box-expanded');
                
                // Aguardar o t√©rmino da anima√ß√£o antes de mostrar os outros boxes
                detailsDiv.addEventListener('transitionend', function handler(e) {
                    if (e.propertyName === 'max-height' || e.propertyName === 'opacity') {
                        // Esconder os detalhes
                        detailsDiv.style.display = 'none';
                        
                        // Mostrar todos os boxes novamente com anima√ß√£o
                        const allAreaBoxes = document.querySelectorAll('.area-box');
                        allAreaBoxes.forEach(box => {
                            box.style.display = ''; // Mostra todos os boxes
                            
                            if (box !== areaBox) {
                                box.classList.add('area-box-fade-in'); // Aplica a anima√ß√£o de entrada
                                setTimeout(() => box.classList.remove('area-box-fade-in'), 600);
                            }
                        });
                        
                        // Remover o listener para evitar m√∫ltiplas chamadas
                        detailsDiv.removeEventListener('transitionend', handler);
                    }
                });
                
                // Atualizar o bot√£o imediatamente 
                this.textContent = 'Expandir';
                this.classList.remove('active');
            }
        });
    });
}

/**
 * Fun√ß√£o para calcular as m√©tricas de produtividade para um per√≠odo espec√≠fico
 * @param {Date} dataInicio Data de in√≠cio do per√≠odo
 * @param {Date} dataFim Data de fim do per√≠odo
 * @returns {Object} Objeto com as m√©tricas de produtividade
 */
function calcularProdutividade(dataInicio, dataFim) {
    // Array de status que indicam processos autuados, conforme especificado.
    // Adicionado "CONTRATA√á√ÉO ATRASADA ‚ö†Ô∏è" √† lista de status processados
    const statusProcessado = ['CONTRATADO ‚úÖ', 'RENOVADO ‚úÖ', 'EM CONTRATA√á√ÉO ü§ù', 'EM RENOVA√á√ÉO üîÑ', 'CONTRATA√á√ÉO ATRASADA ‚ö†Ô∏è'];
    
    const todosProjetos = [];
    for (const categoria in analyticData.projetosPorSituacao) {
        if (analyticData.projetosPorSituacao[categoria] && Array.isArray(analyticData.projetosPorSituacao[categoria])) {
            todosProjetos.push(...analyticData.projetosPorSituacao[categoria]);
        }
    }
    
    // Filtra os projetos para considerar apenas aqueles:
    // 1. Dentro do per√≠odo especificado (dataInicio a dataFim)
    // 2. Que n√£o estejam com status CANCELADO
    // 3. Que sejam tipo Aquisi√ß√£o ou Renova√ß√£o
    const projetosNoPeriodo = todosProjetos.filter(projeto => {
        // Verificar se projeto.i existe e n√£o est√° vazio
        if (!projeto.i) return false;
        
        // Excluir projetos cancelados
        if (projeto.status === 'CANCELADO ‚ùå') return false;
        
        // Verificar se o tipo √© v√°lido
        if (projeto.tipo !== 'üõí Aquisi√ß√£o' && projeto.tipo !== 'üîÑ Renova√ß√£o') return false;
        
        // Converter a data do formato brasileiro (DD/MM/YYYY) para objeto Date
        const dataParts = projeto.i.split('/');
        if (dataParts.length !== 3) return false;
        
        // No formato brasileiro: dataParts[0] = dia, dataParts[1] = m√™s, dataParts[2] = ano
        const dia = parseInt(dataParts[0], 10);
        const mes = parseInt(dataParts[1], 10) - 1;
        const ano = parseInt(dataParts[2], 10);
        
        // Criar objeto Date com os componentes da data
        const dataProjeto = new Date(ano, mes, dia);
        
        // Verificar se a data √© v√°lida
        if (isNaN(dataProjeto.getTime())) return false;
        
        // Retornar apenas projetos dentro do per√≠odo
        return dataProjeto >= dataInicio && dataProjeto <= dataFim;
    });
    
    // Contagem separada de projetos 'üõí Aquisi√ß√£o' e 'üîÑ Renova√ß√£o' dentro do per√≠odo.
    let aquisicao = 0;
    let renovacao = 0;
    projetosNoPeriodo.forEach(projeto => {
        if (projeto.tipo === 'üõí Aquisi√ß√£o') {
            aquisicao++;
        } else if (projeto.tipo === 'üîÑ Renova√ß√£o') {
            renovacao++;
        }
    });
    
    // Calcula o "total de processos a serem autuados" no per√≠odo,
    // que √© a soma de aquisi√ß√µes e renova√ß√µes nesse per√≠odo.
    const totalProjetos = aquisicao + renovacao;
    
    // Separa os projetos autuados e n√£o autuados
    const projetosAutuadosArray = projetosNoPeriodo.filter(projeto => 
        statusProcessado.includes(projeto.status)
    );
    
    const projetosNaoAutuadosArray = projetosNoPeriodo.filter(projeto => 
        !statusProcessado.includes(projeto.status)
    );
    
    // Calcula a quantidade de processos autuados
    const projetosAutuados = projetosAutuadosArray.length;
      // Calcula a "Porcentagem de Conclus√£o", que √© (Processos Autuados / Total de processos a serem autuados) * 100.
    const percentualConclusao = totalProjetos > 0 
        ? Math.round((projetosAutuados / totalProjetos) * 100) 
        : 0;
    
    // Calcula quantos processos faltam para atingir a meta de 80%
    const metaProcessos = Math.ceil(totalProjetos * 0.8); // Arredonda para cima
    const processosFaltamMeta = Math.max(0, metaProcessos - projetosAutuados);
    
    return {
        aquisicao, // Contagem de aquisi√ß√µes no per√≠odo
        renovacao, // Contagem de renova√ß√µes no per√≠odo
        total: totalProjetos, // Total de processos a serem autuados no per√≠odo
        projetosAutuados, // Total de processos efetivamente autuados no per√≠odo
        percentualConclusao, // Percentual de conclus√£o
        projetosAutuadosArray, // Array com projetos autuados
        projetosNaoAutuadosArray, // Array com projetos n√£o autuados
        metaProcessos, // Quantos processos precisam estar autuados para atingir 80%
        processosFaltamMeta // Quantos processos faltam para atingir a meta de 80%
    };
}

/**
 * Fun√ß√£o para renderizar a tabela de detalhes dos projetos
 * @param {Array} projetos Lista de projetos para exibir
 * @returns {string} HTML da tabela de detalhes
 */
function renderProdutividadeProjetosTable(projetos) {
    if (projetos.length === 0) {
        return '<p>Nenhum projeto encontrado nesta categoria.</p>';
    }
    
    // Ordenar projetos para que os conclu√≠dos e renovados apare√ßam no final
    const projetosOrdenados = [...projetos].sort((a, b) => {
        const statusA = a.status || '';
        const statusB = b.status || '';
        
        // Verificar se s√£o status conclu√≠dos/renovados
        const isAConcluido = statusA.includes('CONTRATADO ‚úÖ') || statusA.includes('RENOVADO ‚úÖ');
        const isBConcluido = statusB.includes('CONTRATADO ‚úÖ') || statusB.includes('RENOVADO ‚úÖ');
        
        // Se ambos s√£o conclu√≠dos ou ambos n√£o s√£o, manter ordem original
        if (isAConcluido === isBConcluido) {
            return 0;
        }
        
        // Se apenas A √© conclu√≠do, vai para o final (retorna 1)
        if (isAConcluido && !isBConcluido) {
            return 1;
        }
        
        // Se apenas B √© conclu√≠do, A vem primeiro (retorna -1)
        if (!isAConcluido && isBConcluido) {
            return -1;
        }
        
        return 0;
    });
    
    let html = `
        <table class="project-details-table">
            <thead>
                <tr>
                    <th>ID PCA</th>
                    <th>√Årea</th>
                    <th>Tipo</th>
                    <th>Projeto</th>
                    <th>Status</th>
                    <th>Data PCA</th>
                    <th>Valor (R$)</th>
                    <th>Processo</th>
                </tr>
            </thead>
            <tbody>
    `;
    
    projetosOrdenados.forEach(projeto => {
        let tipoCellContent = projeto.tipo;
        let tdTipoClass = '';

        if (tipoCellContent && (tipoCellContent.includes('üîÑ Renova√ß√£o') || tipoCellContent.includes('üõí Aquisi√ß√£o'))) {
            tdTipoClass = 'no-wrap-cell';
        }

        let contratoAttrs = '';
        if (projeto.numeroContrato && String(projeto.numeroContrato).trim() !== '') {
            contratoAttrs += ` data-contrato="${String(projeto.numeroContrato).trim()}"`;
        }
        if (projeto.numeroRegistro && String(projeto.numeroRegistro).trim() !== '') {
            contratoAttrs += ` data-registro="${String(projeto.numeroRegistro).trim()}"`;
        }        html += `
            <tr>
                <td>${projeto.idPca}</td>
                <td>${formatAreaWithClasses(projeto.area)}</td>
                <td class="${tdTipoClass}">${tipoCellContent}</td>
                <td${contratoAttrs}>${projeto.projeto}</td>
                <td>${formatStatusWithClasses(projeto.status)}</td>
                <td>${projeto.dataProcesso || '-'}</td>
                <td>R$ ${formatCurrency(projeto.valor)}</td>
                <td class="no-wrap-cell">${_renderProcessCell(projeto.numProcesso, projeto.modalidadeX, projeto.numeroY)}</td>
            </tr>
        `;
    });
    
    html += `
            </tbody>
        </table>
    `;
    
    return html;
}

/**
 * Fun√ß√£o para renderizar a se√ß√£o de produtividade
 * Renomeada para evitar conflito com a fun√ß√£o em AnalyticsRender.js
 */
function renderProdutividadeDetalhada() {
    // Obter o ano selecionado pelo usu√°rio
    const selectedYear = window.getSelectedYear ? window.getSelectedYear() : '2025';
    const year = parseInt(selectedYear, 10);
    const prevYear = year - 1;
    
    // Calcular produtividade para o primeiro semestre (Janeiro a Junho)
    const produtividade_1 = calcularProdutividade(
        new Date(prevYear, 9, 1), // 01/11/ano anterior (m√™s √© base 0: novembro = 10)
        new Date(year, 5, 30)      // 30/06/ano atual
    );
    
    // Calcular produtividade para o segundo semestre (Julho a Dezembro)
    const produtividade_2 = calcularProdutividade(
        new Date(year, 6, 1),    // 01/07/ano atual
        new Date(year, 11, 31)   // 31/12/ano atual
    );

    // Fun√ß√£o para determinar classe de performance baseada no percentual
    function getPerformanceClass(percentual) {
        if (percentual >= 80) return 'alto-desempenho';
        if (percentual >= 60) return 'medio-desempenho';
        return 'baixo-desempenho';
    }

    // Fun√ß√£o para obter status textual
    function getStatusText(percentual) {
        if (percentual >= 80) return { text: 'Meta Atingida', icon: '‚úÖ', class: 'alto' };
        if (percentual >= 60) return { text: 'Pr√≥ximo da Meta', icon: '‚ö†Ô∏è', class: 'medio' };
        return { text: 'Abaixo da Meta', icon: 'üî¥', class: 'baixo' };
    }

    const status_1 = getStatusText(produtividade_1.percentualConclusao);
    const status_2 = getStatusText(produtividade_2.percentualConclusao);
    
    let html = `
    <div class="analytics-section">
        <h2>4. Produtividade Aquisi√ß√µes T.I.</h2>
        
        <div class="analytics-subsection">
            <h3>4.1 √çndice de Produtividade ${year} | Meta 80%</h3>
        
            <div class="tipo-grid">
                <!-- Quadro 1: Produtividade do primeiro semestre -->
                <div class="produtividade-box">
                    <h3 data-period="${year}.1">Produtividade ${year}.1</h3>
                    <div class="produtividade-content">
                        <div class="produtividade-tipos">
                            <div class="tipo-item">
                                <span class="tipo-label">üõí Aquisi√ß√£o</span>
                                <span class="tipo-value">${produtividade_1.aquisicao}</span>
                            </div>
                            <div class="tipo-item">
                                <span class="tipo-label">üîÑ Renova√ß√£o</span>
                                <span class="tipo-value">${produtividade_1.renovacao}</span>
                            </div>
                            <div class="tipo-item total">
                                <span class="tipo-label">Total</span>
                                <span class="tipo-value">${produtividade_1.total}</span>
                            </div>
                        </div>
                        
                        <div class="produtividade-percentual">
                            <h4>üìä Produtividade em %</h4>
                            <div class="percentual-item">
                                <span class="percentual-label">‚úÖ Total de Processos Autuados</span>
                                <span class="percentual-value">${produtividade_1.projetosAutuados}</span>
                            </div>                            <div class="percentual-item">
                                <span class="percentual-label">‚è≥ Total de Processos N√£o Autuados</span>
                                <span class="percentual-value">${produtividade_1.projetosNaoAutuadosArray.length}</span>
                            </div>                            <div class="percentual-item">
                                <span class="percentual-label">üéØ Processos para Meta de 80%</span>
                                <span class="percentual-value meta-info">
                                    ${produtividade_1.processosFaltamMeta === 0 
                                        ? '<span class="meta-atingida">‚úÖ Meta atingida, Parab√©ns!</span>' 
                                        : `<span class="processos-faltam">${produtividade_1.processosFaltamMeta === 1 ? 'Falta' : 'Faltam'} ${produtividade_1.processosFaltamMeta} processo${produtividade_1.processosFaltamMeta > 1 ? 's' : ''}</span>`
                                    }
                                </span>
                            </div>
                            <div class="percentual-item">
                                <span class="percentual-label">üéØ Porcentagem de Conclus√£o para ${year}.1</span>
                                <div class="percentual-value percentual-progress">
                                    <div class="progress-container">
                                        <div class="progress-bar ${getPerformanceClass(produtividade_1.percentualConclusao)}" 
                                             style="--progress-width: ${produtividade_1.percentualConclusao}%; width: ${produtividade_1.percentualConclusao}%">
                                        </div>
                                    </div>
                                    <div class="progress-text">
                                        <span class="progress-percentage">${produtividade_1.percentualConclusao}%</span>
                                        <span class="progress-status ${status_1.class}">
                                            ${status_1.icon} ${status_1.text}
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>                        
                        <div class="produtividade-botoes">
                            <button class="btn prod-expand-btn" data-period="${year}_1" data-type="autuados">
                                üìã Ver Processos Autuados
                                <span class="expand-icon">‚ñº</span>
                            </button>
                            <button class="btn prod-expand-btn" data-period="${year}_1" data-type="nao-autuados">
                                ‚è∏Ô∏è Ver Processos N√£o Autuados
                                <span class="expand-icon">‚ñº</span>
                            </button>
                        </div>
                        
                        <!-- Container para detalhes dos processos autuados -->
                        <div id="detalhes-${year}_1-autuados" class="detalhes-produtividade" style="display:none;">
                            <h4>üìã Processos Autuados ${year}.1</h4>
                            <div class="project-details">
                                ${renderProdutividadeProjetosTable(produtividade_1.projetosAutuadosArray)}
                            </div>
                        </div>
                        
                        <!-- Container para detalhes dos processos n√£o autuados -->
                        <div id="detalhes-${year}_1-nao-autuados" class="detalhes-produtividade" style="display:none;">
                            <h4>‚è∏Ô∏è Processos N√£o Autuados ${year}.1</h4>
                            <div class="project-details">
                                ${renderProdutividadeProjetosTable(produtividade_1.projetosNaoAutuadosArray)}
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Quadro 2: Produtividade do segundo semestre -->
                <div class="produtividade-box">
                    <h3 data-period="${year}.2">Produtividade ${year}.2</h3>
                    <div class="produtividade-content">
                        <div class="produtividade-tipos">
                            <div class="tipo-item">
                                <span class="tipo-label">üõí Aquisi√ß√£o</span>
                                <span class="tipo-value">${produtividade_2.aquisicao}</span>
                            </div>
                            <div class="tipo-item">
                                <span class="tipo-label">üîÑ Renova√ß√£o</span>
                                <span class="tipo-value">${produtividade_2.renovacao}</span>
                            </div>
                            <div class="tipo-item total">
                                <span class="tipo-label">Total</span>
                                <span class="tipo-value">${produtividade_2.total}</span>
                            </div>
                        </div>
                        
                        <div class="produtividade-percentual">
                            <h4>üìä Produtividade em %</h4>
                            <div class="percentual-item">
                                <span class="percentual-label">‚úÖ Total de Processos Autuados</span>
                                <span class="percentual-value">${produtividade_2.projetosAutuados}</span>
                            </div>                            <div class="percentual-item">
                                <span class="percentual-label">‚è≥ Total de Processos N√£o Autuados</span>
                                <span class="percentual-value">${produtividade_2.projetosNaoAutuadosArray.length}</span>
                            </div>                            <div class="percentual-item">
                                <span class="percentual-label">üéØ Processos para Meta de 80%</span>
                                <span class="percentual-value meta-info">
                                    ${produtividade_2.processosFaltamMeta === 0 
                                        ? '<span class="meta-atingida">‚úÖ Meta atingida, Parab√©ns!</span>' 
                                        : `<span class="processos-faltam">${produtividade_2.processosFaltamMeta === 1 ? 'Falta' : 'Faltam'} ${produtividade_2.processosFaltamMeta} processo${produtividade_2.processosFaltamMeta > 1 ? 's' : ''}</span>`
                                    }
                                </span>
                            </div>
                            <div class="percentual-item">
                                <span class="percentual-label">üéØ Porcentagem de Conclus√£o para ${year}.2</span>
                                <div class="percentual-value percentual-progress">
                                    <div class="progress-container">
                                        <div class="progress-bar ${getPerformanceClass(produtividade_2.percentualConclusao)}" 
                                             style="--progress-width: ${produtividade_2.percentualConclusao}%; width: ${produtividade_2.percentualConclusao}%">
                                        </div>
                                    </div>
                                    <div class="progress-text">
                                        <span class="progress-percentage">${produtividade_2.percentualConclusao}%</span>
                                        <span class="progress-status ${status_2.class}">
                                            ${status_2.icon} ${status_2.text}
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="produtividade-botoes">
                            <button class="btn prod-expand-btn" data-period="${year}_2" data-type="autuados">
                                üìã Ver Processos Autuados
                                <span class="expand-icon">‚ñº</span>
                            </button>
                            <button class="btn prod-expand-btn" data-period="${year}_2" data-type="nao-autuados">
                                ‚è∏Ô∏è Ver Processos N√£o Autuados
                                <span class="expand-icon">‚ñº</span>
                            </button>
                        </div>
                        
                        <!-- Container para detalhes dos processos autuados -->
                        <div id="detalhes-${year}_2-autuados" class="detalhes-produtividade" style="display:none;">
                            <h4>üìã Processos Autuados ${year}.2</h4>
                            <div class="project-details">
                                ${renderProdutividadeProjetosTable(produtividade_2.projetosAutuadosArray)}
                            </div>
                        </div>
                        
                        <!-- Container para detalhes dos processos n√£o autuados -->
                        <div id="detalhes-${year}_2-nao-autuados" class="detalhes-produtividade" style="display:none;">
                            <h4>‚è∏Ô∏è Processos N√£o Autuados ${year}.2</h4>
                            <div class="project-details">
                                ${renderProdutividadeProjetosTable(produtividade_2.projetosNaoAutuadosArray)}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>    </div>
    `;
    
    return html;
}

/**
 * Fun√ß√£o para adicionar listeners nos bot√µes de expandir/contrair da produtividade
 * com funcionalidade de rolagem autom√°tica - permitindo m√∫ltiplos itens abertos
 */
function addProdutividadeExpandListeners() {
    const produtividadeExpandButtons = document.querySelectorAll('.prod-expand-btn');
    
    produtividadeExpandButtons.forEach(button => {
        // Armazenar o texto original do bot√£o para restaurar ao esconder
        const originalText = button.textContent.replace('‚ñº', '').trim();
        button.setAttribute('data-original-text', originalText);
        
        // Construir o ID do alvo a partir dos atributos data-period e data-type
        const period = button.getAttribute('data-period');
        const type = button.getAttribute('data-type');
        const targetId = `detalhes-${period}-${type}`;
        
        button.addEventListener('click', function() {
            const detailsDiv = document.getElementById(targetId);
            const expandIcon = this.querySelector('.expand-icon');
            const produtividadeBox = this.closest('.produtividade-box');
            
            if (!detailsDiv) {
                console.error(`Elemento #${targetId} n√£o encontrado!`);
                return;
            }
            
            // Verificar se est√° expandido ou n√£o
            const isExpanded = detailsDiv.style.display !== 'none' && detailsDiv.style.display !== '';
            
            if (!isExpanded) {
                // Mostrar os detalhes com anima√ß√£o
                detailsDiv.style.display = 'block';
                
                // Permitir tempo para renderiza√ß√£o inicial
                setTimeout(() => {
                    detailsDiv.classList.add('expanded');
                    
                    // Chamar setup de tooltips de contrato
                    if (typeof window.setupAnalyticsTooltips === 'function') {
                        window.setupAnalyticsTooltips();
                    }

                    // Rolar at√© o conte√∫do expandido ap√≥s um breve atraso
                    // para que a anima√ß√£o de expans√£o tenha come√ßado
                    setTimeout(() => {
                        detailsDiv.scrollIntoView({ 
                            behavior: 'smooth', 
                            block: 'start'
                        });
                    }, 150);
                }, 50);
                
                // Atualizar o bot√£o para mostrar que est√° expandido
                this.classList.add('active');
                if (expandIcon) {
                    expandIcon.style.transform = 'rotate(180deg)';
                }
                
                // Marcar o box como expandido
                produtividadeBox.classList.add('expanded');
            } else {
                // Esconder os detalhes com anima√ß√£o
                detailsDiv.classList.remove('expanded');
                
                // Usar setTimeout para aguardar a anima√ß√£o completar
                setTimeout(() => {
                    detailsDiv.style.display = 'none';
                }, 300);
                
                // Atualizar o bot√£o para mostrar que est√° recolhido
                this.classList.remove('active');
                if (expandIcon) {
                    expandIcon.style.transform = 'rotate(0deg)';
                }
                
                // Remover a classe expandida se nenhum detalhe estiver vis√≠vel
                const allDetails = produtividadeBox.querySelectorAll('.detalhes-produtividade.expanded');
                if (allDetails.length === 0) {
                    produtividadeBox.classList.remove('expanded');
                }
                
                // Rolar de volta para o box pai
                produtividadeBox.scrollIntoView({ 
                    behavior: 'smooth', 
                    block: 'start'
                });
            }
            
            // Adicionar efeito de ondula√ß√£o ao clicar
            this.classList.add('button-ripple');
            setTimeout(() => {
                this.classList.remove('button-ripple');
            }, 600);
        });
    });
}

/**
 * Fun√ß√£o para formatar o texto de status com as classes corretas
 * @param {string} statusText - O texto do status a ser formatado
 * @returns {string} - O HTML com o status formatado
 */
function formatStatusWithClasses(statusText) {
    // Mapeamento de status para classes CSS
    const statusMapping = {
        'AUTUA√á√ÉO ATRASADA üí£': 'status-autuacao-atrasada-highlight',
        'CONTRATA√á√ÉO ATRASADA ‚ö†Ô∏è': 'status-contratacao-atrasada-highlight',
        'AGUARDANDO DFD ‚è≥': 'status-aguardando-dfd-highlight',
        'AGUARDANDO ETP ‚è≥': 'status-aguardando-etp-highlight',
        'ETP ATRASADO‚ùó': 'status-etp-atrasado-highlight',
        'DFD ATRASADO‚ùó': 'status-dfd-atrasado-highlight',
        'ELABORANDO TRüìù': 'status-elaborando-tr-highlight',
        'AGUARDANDO DEFINI√á√ÉO': 'status-aguardando-definicao-highlight',
        'AN√ÅLISE DE VIABILIDADE üìù': 'status-analise-viabilidade-highlight',
        'EM CONTRATA√á√ÉO ü§ù': 'status-em-contratacao-highlight',
        'EM RENOVA√á√ÉO üîÑ': 'status-em-renovacao-highlight',
        'RENOVADO ‚úÖ': 'status-renovado-highlight',
        'CONTRATADO ‚úÖ': 'status-contratado-highlight',
        'REVIS√ÉO PCA üöß': 'status-revisao-pca-highlight',
        'A INICIAR ‚è∞': 'status-a-iniciar-highlight',
    };

    // Procurar correspond√™ncia exata
    if (statusMapping[statusText]) {
        return `<span class="${statusMapping[statusText]}" style="display:inline-block; vertical-align:middle;">${statusText}</span>`;
    }
    
    // Procurar correspond√™ncia parcial
    for (const [key, className] of Object.entries(statusMapping)) {
        if (statusText.includes(key)) {
            return `<span class="${className}" style="display:inline-block; vertical-align:middle;">${statusText}</span>`;
        }
    }
    
    // Sem formata√ß√£o especial
    return statusText;
}

/**
 * Fun√ß√£o para alternar a exibi√ß√£o de detalhes de uma √°rea
 * @param {HTMLElement} detailsDiv - Elemento de detalhes a ser alternado
 */
function toggleAreaDetails(detailsDiv) {
    if (!detailsDiv.classList.contains('expanded')) {
        detailsDiv.style.display = 'block'; // Mostra antes de animar
        // For√ßa reflow
        void detailsDiv.offsetWidth;
        detailsDiv.classList.add('expanded');
    } else {
        detailsDiv.classList.remove('expanded');
        // S√≥ esconde ap√≥s a transi√ß√£o
        detailsDiv.addEventListener('transitionend', function handler(e) {
            if (e.propertyName === 'max-height' && !detailsDiv.classList.contains('expanded')) {
                detailsDiv.style.display = 'none';
                detailsDiv.removeEventListener('transitionend', handler);
            }
        });
    }
}

/**
 * Fun√ß√£o para adicionar listeners nos bot√µes de expandir/contrair status
 */
function addStatusExpandListeners() {
    const statusExpandButtons = document.querySelectorAll('.status-expand-btn');
    
    statusExpandButtons.forEach(button => {
        // Remover qualquer √≠cone existente primeiro para evitar duplica√ß√£o
        const existingIcon = button.querySelector('.expand-icon');
        if (existingIcon) {
            existingIcon.remove();
        }
        
        // Guardar o texto original e adicionar √≠cone de seta
        const originalText = button.textContent;
        button.innerHTML = originalText + '<span class="expand-icon">‚ñº</span>';
        
        button.addEventListener('click', function(e) {
            e.stopPropagation(); // Evitar que o clique propague
            
            const status = this.getAttribute('data-status');
            const statusId = status.replace(/\s+/g, '-').toLowerCase();
            const detailsRow = document.getElementById(`status-details-${statusId}`);
            
            if (!detailsRow) {
                console.error(`Elemento #status-details-${statusId} n√£o encontrado!`);
                return;
            }
            
            // Verificar se j√° est√° expandido
            const isExpanded = detailsRow.style.display !== 'none' && 
                              detailsRow.style.display !== '';
            
            if (!isExpanded) {
                // Primeiro garantir que est√° vis√≠vel, depois animar
                detailsRow.style.display = 'block';
                
                // Usar setTimeout para garantir que o browser renderize o display antes de adicionar a classe
                setTimeout(() => {
                    detailsRow.classList.add('expanded');
                    // Chamar setup de tooltips de contrato
                    if (typeof window.setupAnalyticsTooltips === 'function') {
                        window.setupAnalyticsTooltips();
                    }
                }, 10);
                
                // Atualizar texto e √≠cone do bot√£o
                this.innerHTML = 'Recolher <span class="expand-icon rotate">‚ñº</span>';
                this.classList.add('active');
                
                // Destacar o box pai
                const parentBox = this.closest('.status-box');
                if (parentBox) parentBox.classList.add('active');
            } else {
                // Remover a classe para iniciar a anima√ß√£o de sa√≠da
                detailsRow.classList.remove('expanded');
                
                // Aguardar a anima√ß√£o terminar antes de esconder
                setTimeout(() => {
                    detailsRow.style.display = 'none';
                }, 300);
                
                // Restaurar o bot√£o
                this.innerHTML = 'Detalhar <span class="expand-icon">‚ñº</span>';
                this.classList.remove('active');
                
                // Remover destaque do box pai
                const parentBox = this.closest('.status-box');
                if (parentBox) parentBox.classList.remove('active');
            }
        });
    });
}

/**
 * Fun√ß√£o para adicionar listeners nos bot√µes de expandir/contrair tipos
 */
function addTipoExpandListeners() {
    const tipoExpandButtons = document.querySelectorAll('.tipo-expand-btn');
    
    tipoExpandButtons.forEach(button => {
        // Remover qualquer √≠cone existente primeiro para evitar duplica√ß√£o
        const existingIcon = button.querySelector('.expand-icon');
        if (existingIcon) {
            existingIcon.remove();
        }
        
        // Guardar o texto original e adicionar √≠cone de seta
        const originalText = button.textContent;
        button.innerHTML = originalText + '<span class="expand-icon">‚ñº</span>';
        
        button.addEventListener('click', function(e) {
            e.stopPropagation(); // Evitar que o clique propague
            
            const tipo = this.getAttribute('data-tipo');
            const tipoId = tipo === "üõí Aquisi√ß√£o" ? "aquisicao" : "renovacao";
            const detailsRow = document.getElementById(`tipo-details-${tipoId}`);
            
            if (!detailsRow) {
                console.error(`Elemento #tipo-details-${tipoId} n√£o encontrado!`);
                return;
            }
            
            // Verificar se j√° est√° expandido
            const isExpanded = detailsRow.style.display !== 'none' && 
                              detailsRow.style.display !== '';
            
            if (!isExpanded) {
                // Primeiro garantir que est√° vis√≠vel, depois animar
                detailsRow.style.display = 'block';
                
                // Usar setTimeout para garantir que o browser renderize o display antes de adicionar a classe
                setTimeout(() => {
                    detailsRow.classList.add('expanded');
                    // Chamar setup de tooltips de contrato
                    if (typeof window.setupAnalyticsTooltips === 'function') {
                        window.setupAnalyticsTooltips();
                    }
                }, 10);
                
                // Atualizar texto e √≠cone do bot√£o
                this.innerHTML = 'Recolher <span class="expand-icon rotate">‚ñº</span>';
                this.classList.add('active');
                
                // Destacar o box pai
                const parentBox = this.closest('.tipo-box');
                if (parentBox) parentBox.classList.add('active');
            } else {
                // Remover a classe para iniciar a anima√ß√£o de sa√≠da
                detailsRow.classList.remove('expanded');
                
                // Aguardar a anima√ß√£o terminar antes de esconder
                setTimeout(() => {
                    detailsRow.style.display = 'none';
                }, 300);
                
                // Restaurar o bot√£o
                this.innerHTML = 'Detalhar <span class="expand-icon">‚ñº</span>';
                this.classList.remove('active');
                
                // Remover destaque do box pai
                const parentBox = this.closest('.tipo-box');
                if (parentBox) parentBox.classList.remove('active');
            }
        });
    });
}