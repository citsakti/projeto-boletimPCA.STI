/**
 * Script de Debug para Acompanhamento de Processos
 * 
 * Execute este script no console do navegador para diagnosticar problemas
 * de renderiza√ß√£o do sistema de acompanhamento.
 * 
 * Como usar:
 * 1. Abra o index.html no navegador
 * 2. Abra o console (F12)
 * 3. Cole e execute este script
 */

console.log('üîç INICIANDO DIAGN√ìSTICO DO SISTEMA DE ACOMPANHAMENTO');
console.log('='.repeat(60));

// Fun√ß√£o para aguardar um tempo espec√≠fico
function wait(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// Fun√ß√£o principal de diagn√≥stico
async function diagnosticarAcompanhamento() {
    console.log('üìä 1. VERIFICANDO ESTADO INICIAL...');
    
    // Verificar se as fun√ß√µes est√£o dispon√≠veis
    console.log('‚úì Fun√ß√µes dispon√≠veis:');
    console.log('  - window.debugAcompanhamentoDetalhado:', typeof window.debugAcompanhamentoDetalhado);
    console.log('  - window.atualizarAcompanhamentoProcessos:', typeof window.atualizarAcompanhamentoProcessos);
    console.log('  - window._acompanhamentoDebug:', window._acompanhamentoDebug);
    
    // Verificar estrutura da tabela
    console.log('\nüîç 2. VERIFICANDO ESTRUTURA DA TABELA...');
    const tbody = document.querySelector('#detalhes table tbody');
    console.log('  - Tbody encontrado:', !!tbody);
    
    if (tbody) {
        const rows = tbody.querySelectorAll('tr');
        console.log('  - Total de linhas:', rows.length);
        
        if (rows.length > 0) {
            const primeiraLinha = rows[0];
            console.log('  - C√©lulas na primeira linha:', primeiraLinha.children.length);
            
            // Verificar cabe√ßalhos
            const headers = document.querySelectorAll('#detalhes table thead th');
            console.log('  - Cabe√ßalhos encontrados:');
            headers.forEach((th, i) => {
                console.log(`    [${i}]: ${th.textContent.trim()}`);
            });
            
            // Verificar primeira linha de dados
            console.log('  - Primeira linha de dados:');
            Array.from(primeiraLinha.children).forEach((td, i) => {
                console.log(`    [${i}]: ${td.textContent.trim()}`);
            });
        }
    }
    
    // Ativar debug e executar diagn√≥stico detalhado
    console.log('\nüîß 3. ATIVANDO DEBUG E EXECUTANDO DIAGN√ìSTICO...');
    window._acompanhamentoDebug = true;
    
    if (typeof window.debugAcompanhamentoDetalhado === 'function') {
        window.debugAcompanhamentoDetalhado();
    } else {
        console.warn('‚ö†Ô∏è Fun√ß√£o debugAcompanhamentoDetalhado n√£o encontrada');
    }
    
    // For√ßar atualiza√ß√£o
    console.log('\nüîÑ 4. FOR√áANDO ATUALIZA√á√ÉO...');
    if (typeof window.atualizarAcompanhamentoProcessos === 'function') {
        try {
            await window.atualizarAcompanhamentoProcessos();
            console.log('‚úì Atualiza√ß√£o executada com sucesso');
        } catch (error) {
            console.error('‚ùå Erro na atualiza√ß√£o:', error);
        }
    } else {
        console.warn('‚ö†Ô∏è Fun√ß√£o atualizarAcompanhamentoProcessos n√£o encontrada');
    }
    
    // Aguardar e verificar novamente
    console.log('\n‚è±Ô∏è 5. AGUARDANDO 5 SEGUNDOS E VERIFICANDO RESULTADO...');
    await wait(5000);
    
    console.log('\nüìà 6. VERIFICA√á√ÉO FINAL:');
    if (typeof window.debugAcompanhamentoDetalhado === 'function') {
        window.debugAcompanhamentoDetalhado();
    }
    
    // Verificar se alguma c√©lula foi atualizada
    const celulasAcompanhamento = document.querySelectorAll('#detalhes table tbody td:nth-child(5)');
    let celulasComDados = 0;
    let celulasComAPI = 0;
    
    celulasAcompanhamento.forEach(cell => {
        if (cell.textContent.trim() && cell.textContent.trim() !== '') {
            celulasComDados++;
        }
        if (cell.dataset.fonteDados === 'api') {
            celulasComAPI++;
        }
    });
    
    console.log('\nüìä 7. RESUMO FINAL:');
    console.log(`  - Total de c√©lulas de acompanhamento: ${celulasAcompanhamento.length}`);
    console.log(`  - C√©lulas com dados: ${celulasComDados}`);
    console.log(`  - C√©lulas atualizadas pela API: ${celulasComAPI}`);
    
    if (celulasComAPI > 0) {
        console.log('‚úÖ SUCCESS: Sistema funcionando! Dados da API foram renderizados.');
    } else if (celulasComDados > 0) {
        console.log('‚ö†Ô∏è WARNING: H√° dados nas c√©lulas, mas n√£o vieram da API.');
    } else {
        console.log('‚ùå ERROR: Nenhum dado foi renderizado nas c√©lulas de acompanhamento.');
    }
    
    console.log('\nüîö DIAGN√ìSTICO CONCLU√çDO');
    console.log('='.repeat(60));
}

// Verificar se a p√°gina j√° carregou
if (document.readyState === 'loading') {
    console.log('‚è≥ Aguardando carregamento da p√°gina...');
    document.addEventListener('DOMContentLoaded', () => {
        setTimeout(diagnosticarAcompanhamento, 2000);
    });
} else {
    console.log('‚úì P√°gina j√° carregada, iniciando diagn√≥stico...');
    setTimeout(diagnosticarAcompanhamento, 2000);
}

// Expor fun√ß√£o para execu√ß√£o manual
window.diagnosticarAcompanhamento = diagnosticarAcompanhamento;

console.log('\nüí° DICA: Para executar o diagn√≥stico manualmente, digite:');
console.log('   diagnosticarAcompanhamento()');
