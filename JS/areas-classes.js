/**
 * areas-classes.js - Utilit√°rio para formata√ß√£o visual de √°reas no Boletim PCA 2025
 * 
 * Este script √© respons√°vel por:
 *  - Definir o mapeamento entre nomes de √°reas e classes CSS
 *  - Aplicar formata√ß√£o visual espec√≠fica √†s c√©lulas de √°reas nas tabelas
 *  - Disponibilizar fun√ß√µes globais para (re)aplicar formata√ß√£o quando necess√°rio
 *  - Garantir consist√™ncia visual entre os diversos componentes do sistema
 * 
 * =============== ESTRUTURA PRINCIPAL ================
 * 
 * # Mapeamento de √Åreas:
 *   - Define uma rela√ß√£o entre nomes de √°reas (com emojis) e classes CSS
 *   - Permite estiliza√ß√£o consistente em todo o sistema
 *   - Centraliza o controle de apar√™ncia visual por √°rea
 * 
 * # Fun√ß√µes Principais:
 *   - assignAreaClasses(): Aplica classes CSS √†s c√©lulas de √°rea nas tabelas
 *   - Usa seletores DOM para encontrar c√©lulas de √°rea
 *   - Substitui o texto da c√©lula por um <span> estilizado
 * 
 * # Fluxo de Execu√ß√£o:
 *   1. O script define o mapeamento de √°reas para classes CSS
 *   2. A fun√ß√£o assignAreaClasses √© declarada
 *   3. Listeners s√£o configurados para aplicar a formata√ß√£o em momentos-chave:
 *      - Ap√≥s o carregamento do DOM
 *      - Ap√≥s o carregamento da tabela (evento personalizado 'tabela-carregada')
 *   4. A fun√ß√£o √© exposta globalmente para ser chamada de outros scripts
 * 
 * # Integra√ß√£o:
 *   - As classes CSS espec√≠ficas (como 'area-sti-highlight') est√£o definidas no CSS
 *   - O script responde ao evento personalizado 'tabela-carregada'
 *   - A fun√ß√£o √© exposta no objeto window para uso por outros scripts
 * 
 * # Padr√£o Visual:
 *   - Cada √°rea tem uma cor e estilo espec√≠ficos
 *   - A formata√ß√£o √© aplicada via span com classes CSS apropriadas
 *   - Os emojis s√£o mantidos intactos para identifica√ß√£o visual r√°pida
 */

/**
 * Mapeamento de nomes de √°reas para classes CSS base
 * Cada √°rea tem um prefixo de classe CSS que ser√° usado para estiliza√ß√£o
 */
const areaMapping = {
    'STI üë©‚Äçüíº': 'area-sti',
    'OPERA√á√ïES üóÑÔ∏è': 'area-operacoes',
    'DEV üë®‚Äçüíª': 'area-dev',
    'ANALYTICS üìä': 'area-analytics',
    'GOVERNAN√áA üåê': 'area-governanca',
};

/**
 * Aplica classes CSS √†s c√©lulas de √°rea nas tabelas
 * Procura por c√©lulas na segunda coluna (√≠ndice 1) de todas as tabelas
 * e adiciona spans com classes espec√≠ficas para cada √°rea
 */
function assignAreaClasses() {
    document.querySelectorAll('table tbody tr').forEach(row => {
        const cell = row.querySelectorAll('td')[1]; // coluna √Årea
        if (!cell) return;

        const txt = cell.textContent.trim();
        const base = areaMapping[txt];
        if (!base) return;

        cell.innerHTML = `<span class="${base}-highlight">${txt}</span>`;
    });
}

// Aplica a formata√ß√£o de √°reas em momentos-chave:

// 1. Ap√≥s o carregamento completo do DOM
document.addEventListener('DOMContentLoaded', () => {
    assignAreaClasses();
});

// 2. Ap√≥s o carregamento/atualiza√ß√£o da tabela (evento personalizado)
document.addEventListener('tabela-carregada', assignAreaClasses);

// Exp√µe a fun√ß√£o globalmente para que possa ser chamada por outros scripts
window.assignAreaClasses = assignAreaClasses;

// NOTA: Este bloco de debug pode ser removido em produ√ß√£o
// Verifica a correspond√™ncia de texto para c√©lulas de √°rea
document.querySelectorAll('table tbody tr').forEach(row => {
    const cell = row.querySelector('td:nth-child(2)');
    console.log(`[${cell.textContent}] =>`, cell.textContent.trim() === 'ANALYTICS üìä');
});