/**
 * StatusAtrasado.js - Sistema de Tooltips e Alertas Visuais do Boletim PCA 2025
 * 
 * Este script √© respons√°vel por:
 *  - Adicionar tooltips informativos aos status de processo
 *  - Destacar visualmente c√©lulas da tabela com status de atraso ou especiais
 *  - Reagir dinamicamente a altera√ß√µes na tabela
 *  - Exibir detalhes contextuais sobre cada status ao passar o mouse
 *
 * =============== ESTRUTURA PRINCIPAL ================
 * 
 * # Componentes de Interface:
 *   - Elemento tooltip: Exibi√ß√£o flutuante com informa√ß√µes detalhadas
 *   - Marca√ß√£o visual: Classe CSS aplicada √†s c√©lulas com status especiais
 *   - Observer: Monitora mudan√ßas na tabela para manter tooltips atualizados
 * 
 * # Fun√ß√µes Principais:
 *   - setupTooltips(): Configura tooltips para c√©lulas de status especiais
 *   - handleMouseEnter(): Exibe tooltip com detalhes espec√≠ficos do status
 *   - handleMouseLeave(): Oculta o tooltip quando o mouse sai da c√©lula
 * 
 * # Fluxo de Execu√ß√£o:
 *   1. Define uma lista de status especiais a serem destacados
 *   2. Cria um observer para monitorar mudan√ßas na tabela
 *   3. Cria dinamicamente um elemento de tooltip no body da p√°gina
 *   4. Para cada c√©lula da coluna de status, aplica classes e listeners quando necess√°rio
 *   5. O conte√∫do do tooltip √© definido conforme o status e atributos data-*
 *   6. O script responde ao evento customizado 'tabela-carregada'
 * 
 * # Personaliza√ß√£o de Tooltips:
 *   - AUTUA√á√ÉO ATRASADA: Usa data-detalhe-autuacao
 *   - CONTRATA√á√ÉO ATRASADA: Usa data-detalhe-contratacao
 *   - EM CONTRATA√á√ÉO/RENOVA√á√ÉO: Usa data-detalhe-contratacao-renovacao
 *   - Outros status: Usa data-detalhe-status-geral
 * 
 * # Depend√™ncias:
 *   - Tabela DOM com <tbody> e coluna de status (6¬™ coluna, √≠ndice 5)
 *   - Atributos data-* nas c√©lulas para informa√ß√µes detalhadas
 *   - Evento customizado 'tabela-carregada' disparado por main.js
 *   - CSS para a classe 'status-atrasado' e 'status-tooltip'
 */

document.addEventListener('DOMContentLoaded', function() {
    // Lista de status a serem destacados
    const statusList = [
        'AUTUA√á√ÉO ATRASADA üí£',
        'CONTRATA√á√ÉO ATRASADA ‚ö†Ô∏è',
        'AGUARDANDO DFD ‚è≥',
        'AGUARDANDO ETP ‚è≥',
        'DFD ATRASADO‚ùó',
        'ETP ATRASADO‚ùó',
        'ELABORANDO TRüìù',
        'AN√ÅLISE DE VIABILIDADE üìù',
        'EM CONTRATA√á√ÉO ü§ù', // Novo
        'EM RENOVA√á√ÉO üîÑ'    // Novo
    ];

    // Configurar observer para detectar mudan√ßas na tabela
    const observer = new MutationObserver(function(mutations) {
        setupTooltips();
    });

    // Configura√ß√£o inicial do tooltip
    const tooltip = document.createElement('div');
    tooltip.className = 'status-tooltip';
    document.body.appendChild(tooltip);

    // Fun√ß√£o para configurar os tooltips
    function setupTooltips() {
        // Selecionar todas as c√©lulas da coluna "Status do Processo" (coluna 6, √≠ndice 5 na tabela HTML)
        const statusCells = document.querySelectorAll('table tbody tr td:nth-child(6)');

        statusCells.forEach(cell => {
            // Verificar se cont√©m algum dos status definidos
            const foundStatus = statusList.find(status => cell.textContent.includes(status));
            if (foundStatus) {
                // Adicionar classe para marca√ß√£o visual
                cell.classList.add('status-atrasado');

                // Remover event listeners antigos (para evitar duplica√ß√£o)
                cell.removeEventListener('mouseenter', handleMouseEnter);
                cell.removeEventListener('mouseleave', handleMouseLeave);

                // Adicionar novos event listeners
                cell.addEventListener('mouseenter', handleMouseEnter);
                cell.addEventListener('mouseleave', handleMouseLeave);
            } else {
                // Remove a classe e listeners se o status n√£o for mais especial
                cell.classList.remove('status-atrasado');
                cell.removeEventListener('mouseenter', handleMouseEnter);
                cell.removeEventListener('mouseleave', handleMouseLeave);
            }
        });
    }

    // Manipuladores de eventos separados (para poder remov√™-los facilmente)
    function handleMouseEnter(event) {
        const cell = this; // Esta √© a c√©lula <td> da coluna "Status do Processo"
        let tooltipText = '';
        const statusText = cell.textContent.trim();

        if (statusText.includes('AUTUA√á√ÉO ATRASADA üí£')) {
            const detalhe = cell.dataset.detalheAutuacao;
            tooltipText = detalhe ? detalhe : 'Autua√ß√£o Atrasada (informa√ß√£o adicional n√£o dispon√≠vel)';
        } 
        else if (statusText.includes('CONTRATA√á√ÉO ATRASADA ‚ö†Ô∏è')) {
            const detalhe = cell.dataset.detalheContratacao;
            tooltipText = detalhe ? detalhe : 'Contrata√ß√£o Atrasada (informa√ß√£o adicional n√£o dispon√≠vel)';
        }
        // Trata os novos status 'EM CONTRATA√á√ÉO' e 'EM RENOVA√á√ÉO'
        else if (statusText.includes('EM CONTRATA√á√ÉO ü§ù') || statusText.includes('EM RENOVA√á√ÉO üîÑ')) {
            const detalhe = cell.dataset.detalheContratacaoRenovacao; 
            if (detalhe) {
                if (statusText.includes('EM RENOVA√á√ÉO üîÑ')) {
                    if (/^\d+$/.test(detalhe)) {
                        tooltipText = `Faltam ${detalhe} dias para o Vencimento da Renova√ß√£o.`;
                    } else {
                        tooltipText = detalhe;
                    }
                } else if (statusText.includes('EM CONTRATA√á√ÉO ü§ù')) {
                    if (/^\d+$/.test(detalhe)) {
                        tooltipText = `Faltam ${detalhe} dias para a Contrata√ß√£o.`;
                    } else {
                        tooltipText = detalhe;
                    }
                }
            } else {
                tooltipText = 'Informa√ß√£o adicional n√£o dispon√≠vel (detalheContratacaoRenovacao ausente).';
            }
        }
        // Para os outros status da lista (que usam coluna L), usar o data-detalhe-status-geral
        else if (statusList.slice(2, 8).some(s => statusText.includes(s))) { 
            const detalhe = cell.dataset.detalheStatusGeral; 
            if (detalhe) {
                if (/^\d+$/.test(detalhe)) {
                    tooltipText = `Faltam ${detalhe} dias para a Autua√ß√£o do Processo.`;
                } else {
                    tooltipText = detalhe;
                }
            } else {
                tooltipText = 'Informa√ß√£o adicional n√£o dispon√≠vel (detalheStatusGeral ausente).';
            }
        }

        if (tooltipText) {
            tooltip.textContent = tooltipText;
            tooltip.style.opacity = '1';

            const rect = cell.getBoundingClientRect();
            const scrollTop = window.scrollY || document.documentElement.scrollTop;
            const scrollLeft = window.scrollX || document.documentElement.scrollLeft;

            tooltip.style.top = (rect.top + scrollTop - tooltip.offsetHeight - 10) + 'px';
            tooltip.style.left = (rect.left + scrollLeft + (rect.width / 2) - (tooltip.offsetWidth / 2)) + 'px';
        } else {
            tooltip.style.opacity = '0';
        }
    }

    function handleMouseLeave() {
        tooltip.style.opacity = '0';
    }

    // Iniciar observa√ß√£o da tabela
    const tbody = document.querySelector('table tbody');
    if (tbody) {
        observer.observe(tbody, { childList: true, subtree: true });
    }

    // Escutar o evento customizado 'tabela-carregada' disparado por main.js
    document.addEventListener('tabela-carregada', () => {
        setupTooltips();
    });

    // Chamada inicial para o caso de a tabela j√° estar populada no DOMContentLoaded (improv√°vel com fetch)
    setupTooltips(); 
});