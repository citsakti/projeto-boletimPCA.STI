document.addEventListener('DOMContentLoaded', function() {
    console.log('StatusAtrasado.js carregado'); // Log para debug

    // Lista de status a serem destacados
    const statusList = [
        'AUTUA√á√ÉO ATRASADA üí£',
        'CONTRATA√á√ÉO ATRASADA ‚ö†Ô∏è',
        'AGUARDANDO DFD ‚è≥',
        'AGUARDANDO ETP ‚è≥',
        'DFD ATRASADO‚ùó',
        'ETP ATRASADO‚ùó',
        'ELABORANDO TRüìù',
        'AN√ÅLISE DE VIABILIDADE üìù',
        'EM CONTRATA√á√ÉO ü§ù', // Novo
        'EM RENOVA√á√ÉO üîÑ'    // Novo
    ];

    // Configurar observer para detectar mudan√ßas na tabela
    const observer = new MutationObserver(function(mutations) {
        setupTooltips();
        console.log('Tabela atualizada, aplicando tooltips'); // Log para debug
    });

    // Configura√ß√£o inicial do tooltip
    const tooltip = document.createElement('div');
    tooltip.className = 'status-tooltip';
    document.body.appendChild(tooltip);

    // Fun√ß√£o para configurar os tooltips
    function setupTooltips() {
        // Selecionar todas as c√©lulas da coluna "Status do Processo" (coluna 6, √≠ndice 5 na tabela HTML)
        const statusCells = document.querySelectorAll('table tbody tr td:nth-child(6)');
        console.log('C√©lulas de status encontradas:', statusCells.length); // Log para debug

        statusCells.forEach(cell => {
            // Verificar se cont√©m algum dos status definidos
            const foundStatus = statusList.find(status => cell.textContent.includes(status));
            if (foundStatus) {
                console.log('Status especial encontrado:', cell.textContent); // Log para debug

                // Adicionar classe para marca√ß√£o visual
                cell.classList.add('status-atrasado');

                // Remover event listeners antigos (para evitar duplica√ß√£o)
                cell.removeEventListener('mouseenter', handleMouseEnter);
                cell.removeEventListener('mouseleave', handleMouseLeave);

                // Adicionar novos event listeners
                cell.addEventListener('mouseenter', handleMouseEnter);
                cell.addEventListener('mouseleave', handleMouseLeave);
            } else {
                // Remove a classe e listeners se o status n√£o for mais especial
                cell.classList.remove('status-atrasado');
                cell.removeEventListener('mouseenter', handleMouseEnter);
                cell.removeEventListener('mouseleave', handleMouseLeave);
            }
        });
    }

    // Manipuladores de eventos separados (para poder remov√™-los facilmente)
    function handleMouseEnter(event) {
        const cell = this; // Esta √© a c√©lula <td> da coluna "Status do Processo"
        let tooltipText = '';
        const statusText = cell.textContent.trim();
        console.log('--- handleMouseEnter ---');
        console.log('C√©lula atual:', statusText);

        if (statusText.includes('AUTUA√á√ÉO ATRASADA üí£')) {
            console.log('Status: AUTUA√á√ÉO ATRASADA üí£');
            const detalhe = cell.dataset.detalheAutuacao;
            tooltipText = detalhe ? detalhe : 'Autua√ß√£o Atrasada (informa√ß√£o adicional n√£o dispon√≠vel)';
            console.log('Detalhe Autua√ß√£o:', detalhe, 'Tooltip:', tooltipText);
        } 
        else if (statusText.includes('CONTRATA√á√ÉO ATRASADA ‚ö†Ô∏è')) {
            console.log('Status: CONTRATA√á√ÉO ATRASADA ‚ö†Ô∏è');
            const detalhe = cell.dataset.detalheContratacao;
            tooltipText = detalhe ? detalhe : 'Contrata√ß√£o Atrasada (informa√ß√£o adicional n√£o dispon√≠vel)';
            console.log('Detalhe Contrata√ß√£o:', detalhe, 'Tooltip:', tooltipText);
        }
        // Trata os novos status 'EM CONTRATA√á√ÉO' e 'EM RENOVA√á√ÉO'
        else if (statusText.includes('EM CONTRATA√á√ÉO ü§ù') || statusText.includes('EM RENOVA√á√ÉO üîÑ')) {
            console.log('Status: EM CONTRATA√á√ÉO/RENOVA√á√ÉO (tentando data-detalhe-contratacao-renovacao)');
            const detalhe = cell.dataset.detalheContratacaoRenovacao; 
            if (detalhe) {
                if (/^\d+$/.test(detalhe)) {
                    tooltipText = `Faltam ${detalhe} dias para a Contrata√ß√£o.`;
                } else {
                    tooltipText = detalhe;
                }
            } else {
                tooltipText = 'Informa√ß√£o adicional n√£o dispon√≠vel (detalheContratacaoRenovacao ausente).';
            }
            console.log('Detalhe Contrata√ß√£o/Renova√ß√£o:', detalhe, 'Tooltip:', tooltipText);
        }
        // Para os outros status da lista (que usam coluna L), usar o data-detalhe-status-geral
        // Ajustado o slice para pegar os status de √≠ndice 2 a 7 da statusList
        else if (statusList.slice(2, 8).some(s => statusText.includes(s))) { 
            console.log('Status: Outro relevante (tentando data-detalhe-status-geral)');
            const detalhe = cell.dataset.detalheStatusGeral; 
            if (detalhe) {
                if (/^\d+$/.test(detalhe)) {
                    tooltipText = `Faltam ${detalhe} dias para a Autua√ß√£o do Processo.`;
                } else {
                    tooltipText = detalhe;
                }
            } else {
                tooltipText = 'Informa√ß√£o adicional n√£o dispon√≠vel (detalheStatusGeral ausente).';
            }
            console.log('Detalhe Status Geral:', detalhe, 'Tooltip:', tooltipText);
        }
        else {
            // Para status n√£o mapeados na statusList, n√£o mostrar tooltip espec√≠fico
            console.log('Status n√£o especial ou n√£o mapeado para tooltip detalhado.');
            // tooltipText = ''; // Garante que nenhum tooltip seja mostrado
        }

        if (tooltipText) {
            tooltip.textContent = tooltipText;
            tooltip.style.opacity = '1';

            const rect = cell.getBoundingClientRect();
            const scrollTop = window.scrollY || document.documentElement.scrollTop;
            const scrollLeft = window.scrollX || document.documentElement.scrollLeft;

            tooltip.style.top = (rect.top + scrollTop - tooltip.offsetHeight - 10) + 'px';
            tooltip.style.left = (rect.left + scrollLeft + (rect.width / 2) - (tooltip.offsetWidth / 2)) + 'px';
        } else {
            tooltip.style.opacity = '0';
        }
        console.log('--- Fim handleMouseEnter ---');
    }

    function handleMouseLeave() {
        tooltip.style.opacity = '0';
    }

    // Iniciar observa√ß√£o da tabela
    const tbody = document.querySelector('table tbody');
    if (tbody) {
        observer.observe(tbody, { childList: true, subtree: true });
        console.log('Observer configurado para a tabela'); // Log para debug
    }

    // Escutar o evento customizado 'tabela-carregada' disparado por main.js
    document.addEventListener('tabela-carregada', () => {
        console.log('Evento tabela-carregada recebido, aplicando tooltips em StatusAtrasado.js');
        setupTooltips();
    });

    // Chamada inicial para o caso de a tabela j√° estar populada no DOMContentLoaded (improv√°vel com fetch)
    setupTooltips(); 
});